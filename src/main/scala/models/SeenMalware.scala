package models

import slick.jdbc.SQLiteProfile.api._

// Logical object modeling
case class SeenMalware(sha256: String,
                       var disposition: Int,
                       var count: Option[Int]) {

   override def toString() = {
     s"""
     |{
     | 'sha256': '$sha256',
     | 'disposition': $disposition,
     | 'count': $count
     |}
     """.stripMargin
   }
}

// Json to object mapper
object SeenMalware {
  import play.api.libs.functional.syntax._
  import play.api.libs.json._

  implicit val seenMalwareReads: Reads[SeenMalware] = (
    (JsPath \ "sha").read[String] and
    (JsPath \ "dp").read[Int] and
    (JsPath \ "count").readNullable[Int]
  ) (SeenMalware.apply _)
}

// Table representation
class SeenMalwares(tag: Tag) extends Table[SeenMalware](tag, "seen_malware") {
  def sha256 = column[String]("sha", O.PrimaryKey)
  def disposition = column[Int]("dp")
  def count = column[Int]("cnt", O.Default(1))

  def * = (sha256, disposition, count.?) <> (
    (SeenMalware.apply _).tupled,
    SeenMalware.unapply
  )
}
